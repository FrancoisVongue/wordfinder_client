// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WordFinder_Repository;

namespace WordFinder.Migrations
{
    [DbContext(typeof(ApiContext))]
    partial class ApiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("WordFinder_Domain.Models.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("WordFinder_Domain.Models.Topic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<string>("Name");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("WordFinder_Domain.Models.Translation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<int>("Order");

                    b.Property<long>("WordId");

                    b.HasKey("Id");

                    b.HasIndex("WordId");

                    b.ToTable("Translations");
                });

            modelBuilder.Entity("WordFinder_Domain.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Available");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName");

                    b.Property<string>("Login");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = 1L, Available = false, FirstName = "Francois", LastName = "Vongue" }
                    );
                });

            modelBuilder.Entity("WordFinder_Domain.Models.Word", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AdditionTime")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Content");

                    b.Property<DateTime?>("LastRepetitionTime");

                    b.Property<int>("TimesRepeated");

                    b.Property<long?>("TopicId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.HasIndex("UserId");

                    b.ToTable("Words");

                    b.HasData(
                        new { Id = 1L, AdditionTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Content = "hello", TimesRepeated = 0, UserId = 1L },
                        new { Id = 2L, AdditionTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Content = "world", TimesRepeated = 0, UserId = 1L },
                        new { Id = 3L, AdditionTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Content = "the", TimesRepeated = 0, UserId = 1L },
                        new { Id = 4L, AdditionTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Content = "star", TimesRepeated = 0, UserId = 1L }
                    );
                });

            modelBuilder.Entity("WordFinder_Domain.Models.WordTag", b =>
                {
                    b.Property<long>("TagId");

                    b.Property<long>("WordId");

                    b.HasKey("TagId", "WordId");

                    b.HasIndex("WordId");

                    b.ToTable("WordTags");
                });

            modelBuilder.Entity("WordFinder_Domain.Models.Tag", b =>
                {
                    b.HasOne("WordFinder_Domain.Models.User", "User")
                        .WithMany("Tags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WordFinder_Domain.Models.Topic", b =>
                {
                    b.HasOne("WordFinder_Domain.Models.User", "User")
                        .WithMany("Topics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WordFinder_Domain.Models.Translation", b =>
                {
                    b.HasOne("WordFinder_Domain.Models.Word", "Word")
                        .WithMany("Translations")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WordFinder_Domain.Models.Word", b =>
                {
                    b.HasOne("WordFinder_Domain.Models.Topic", "Topic")
                        .WithMany("Words")
                        .HasForeignKey("TopicId");

                    b.HasOne("WordFinder_Domain.Models.User", "User")
                        .WithMany("Words")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WordFinder_Domain.Models.WordTag", b =>
                {
                    b.HasOne("WordFinder_Domain.Models.Tag", "Tag")
                        .WithMany("WordTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WordFinder_Domain.Models.Word", "Word")
                        .WithMany("WordTags")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
